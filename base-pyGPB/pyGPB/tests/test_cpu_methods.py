import pytest
from pyGPB._cpu_methods import _GPB_Naive, _GPB_CF, _GPB_DP, _GPB_DC_FFT, _GPB_DP_DC_FFT_Combo
import numpy as np

simple_test_cases = [
    {'probs': [0.1],
     'weights': [2],
     'expected': [0.9, 0, 0.1]},
    {'probs': [0.040315790866, 0.71982418469],
     'weights': [4, 3],
     'expected': [0.268880305735, 0., 0., 0.6908039034, 0.011295509576, 0., 0., 0.02902028129]},
    {'probs': [0.26464448403, 0.952465307878, 0.574899597624],
     'weights': [4, 2, 2],
     'expected': [0.014859341227, 0., 0.317836141326, 0., 0.408007708938, 0., 0.114384919676, 0., 0.144911888833]},
    {'probs': [0.004952306396, 0.278227527594, 0.454419445766, 0.778937136742],
     'weights': [4, 4, 2, 1],
     'expected': [8.662014081221e-02, 3.052147406131e-01, 7.214677296442e-02, 2.542163795848e-01, 3.382127729695e-02,
                  1.191726575436e-01, 2.817007674693e-02, 9.926008647349e-02, 1.661813475627e-04, 5.855566201520e-04,
                  1.384140898538e-04, 4.877159068987e-04]},
    {'probs': [0.856723522181, 0.001648728171, 0.333930371546, 0.747551500179, 0.11689013997],
     'weights': [3, 5, 2, 2, 5],
     'expected': [2.124053401382e-02, 0.000000000000e+00, 7.354637942747e-02, 1.270080434023e-01, 3.153334511801e-02,
                  4.426180277231e-01, 0.000000000000e+00, 1.984102385383e-01, 1.702077939061e-02, 4.225890709944e-03,
                  5.893991729178e-02, 0.000000000000e+00, 2.528484371970e-02, 2.776259473388e-05, 6.892850701921e-06,
                  9.612933106391e-05, 0.000000000000e+00, 4.121588847743e-05]},
    {'probs': [0.740304850617, 0.516865004419, 0.579051469742, 0.856170930578, 0.920293729432, 0.385671330342],
     'weights': [3, 4, 2, 5, 5, 4],
     'expected': [0.000371964313, 0., 0.000511669401, 0.001060347049, 0.000631449603, 0.007967514886, 0.00086861408,
                  0.010753634613, 0.018804579998, 0.013525717197, 0.051432534087, 0.015911823749, 0.066665864486,
                  0.078229055794, 0.086728901818, 0.106263334355, 0.072161836989, 0.123718097475, 0.034312442355,
                  0.170185048829, 0.02361905032, 0.048946429609, 0., 0.067330088993]},
    {'probs': [0.701436588957, 0.614940930874, 0.742826974376, 0.087849814797, 0.769687855284, 0.811488183321,
               0.039888801387],
     'weights': [4, 2, 5, 5, 1, 2, 1],
     'expected': [0.001124171728, 0.003803611941, 0.006790621644, 0.022447819935, 0.011290534471, 0.038439909458,
                  0.028379527864, 0.073006547953, 0.087321728258, 0.095131778857, 0.107552027965, 0.05187851189,
                  0.159299309267, 0.06689690348, 0.186500920647, 0.017284402426, 0.004736611925, 0.014671102577,
                  0.005652966404, 0.01708970049, 0.00070129082]},
    {'probs': [0.855124131187, 0.919443012474, 0.216351333075, 0.806322676582, 0.171443055158, 0.090659059102,
               0.39426161905, 0.445355113337],
     'weights': [1, 3, 5, 4, 1, 2, 4, 5],
     'expected': [0.000448382503, 0.002739338383, 0.000592322635, 0.005390751485, 0.033478793788, 0.02043180087,
                  0.008924459231, 0.027213920528, 0.157810714157, 0.076093638566, 0.038235143482, 0.024655072962,
                  0.113676550467, 0.1835214572, 0.058996014445, 0.024034682974, 0.0203222376, 0.097469111725,
                  0.053461482389, 0.017974522785, 0.005504393821, 0.003903249039, 0.018814128411, 0.004061056596,
                  0.001872452713, 0.000374321245]},
    {'probs': [4.729732958941e-05, 1.308768858592e-01, 5.960962062589e-01, 9.014320656266e-01, 4.456484448449e-01,
               8.677219339456e-01, 5.451251904484e-01, 2.602791177053e-01, 4.087990990123e-01],
     'weights': [4, 5, 1, 5, 3, 4, 4, 3, 1],
     'expected': [5.047104610493e-04, 1.093863774392e-03, 5.150573328066e-04, 5.833295570274e-04, 5.179944146515e-03,
                  1.377352086242e-02, 1.430714496554e-02, 9.622960380468e-03, 1.934459707968e-02, 6.137016162390e-02,
                  9.027512597388e-02, 4.696598966402e-02, 5.672506816856e-02, 1.349012264578e-01, 1.311295150104e-01,
                  6.287704949133e-02, 7.179112480152e-02, 1.095615162340e-01, 6.268103118186e-02, 2.863851778376e-02,
                  2.971632088136e-02, 2.027313791488e-02, 1.524664870814e-02, 6.446064066681e-03, 1.547004955072e-03,
                  3.350751238102e-03, 1.578006298020e-03, 3.048319726425e-07, 7.310618889528e-08, 1.584437373264e-07,
                  7.460491028020e-08]},
    {'probs': [0.063304693156, 0.188818049832, 0.265862161237, 0.250382997591, 0.298832970207, 0.305199791989,
               0.110688792413, 0.905993670759, 0.99997431531, 0.421069144849],
     'weights': [2, 4, 3, 1, 5, 4, 5, 4, 4, 3],
     'expected': [2.532368920643e-07, 8.458481055243e-08, 1.711451272437e-08, 2.816089783140e-07, 9.861898656861e-03,
                  3.294145110819e-03, 6.666101252478e-04, 1.096673261136e-02, 1.052350017077e-01, 4.010796540264e-02,
                  1.152351599667e-02, 1.142690368709e-01, 1.080671681185e-01, 8.715685711230e-02, 5.327507381330e-02,
                  8.659517862406e-02, 9.788511952621e-02, 6.538988502725e-02, 4.100273783923e-02, 3.688319274601e-02,
                  4.984911703511e-02, 2.648697769316e-02, 1.295975930970e-02, 1.305200075585e-02, 1.104991775472e-02,
                  6.941055309685e-03, 2.469724782268e-03, 1.998233331846e-03, 1.496404762519e-03, 9.710525644093e-04,
                  2.805988728754e-04, 5.840431518951e-05, 1.484188391041e-04, 4.534057660093e-05, 9.174009731757e-06,
                  3.064252877380e-06]}
]


def test_GPB_Naive():
    for test_case in simple_test_cases:
        probs = np.array(test_case['probs'])
        weights = np.array(test_case['weights'])
        expected = np.array(test_case['expected'])
        assert np.allclose(_GPB_Naive(probs, weights), expected)


def test_GPB_CF():
    for test_case in simple_test_cases:
        probs = np.array(test_case['probs'])
        weights = np.array(test_case['weights'])
        expected = np.array(test_case['expected'])
        assert np.allclose(_GPB_CF(probs, weights), expected)


def test_GPB_DP():
    for test_case in simple_test_cases:
        probs = np.array(test_case['probs'])
        weights = np.array(test_case['weights'])
        expected = np.array(test_case['expected'])
        assert np.allclose(_GPB_DP(probs, weights), expected)


def test_GPB_DC_FFT():
    for test_case in simple_test_cases:
        probs = np.array(test_case['probs'])
        weights = np.array(test_case['weights'])
        expected = np.array(test_case['expected'])
        assert np.allclose(_GPB_DC_FFT(probs, weights), expected)


def test_GPB_DP_DC_FFT_Combo():
    for test_case in simple_test_cases:
        probs = np.array(test_case['probs'])
        weights = np.array(test_case['weights'])
        expected = np.array(test_case['expected'])
        assert np.allclose(_GPB_DP_DC_FFT_Combo(probs, weights), expected)
